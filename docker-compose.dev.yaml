services:
  nginx:
    container_name: nginx
    image: nginx
    depends_on:
      - redwood
      - backend
      - filer
    restart: always
    volumes:
      - ./.data/nginx/logs:/var/log/nginx
      - ./.data/nginx/conf:/etc/nginx
    ports:
      - "80:80"
    command: "/bin/sh -c 'echo \"## DO NOT EDIT; THIS IS AUTOGENERATED. EDIT nginx.conf.template INSTEAD\n\n$(envsubst < /etc/nginx/nginx.conf.template)\" > /etc/nginx/nginx.conf; while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - checkpoint
    environment:
      WEB_HOST: "redwood" # don't change these
      API_HOST: "redwood" # don't change these
      CHECKPOINT_HOSTNAME: "checkpoint.localhost"

  master:
    image: checkpointvcs/seaweedfs:local
    build:
      context: ./src/seaweedfs/docker
      dockerfile: Dockerfile.local
    pull_policy: never
    command: "master -ip=master -ip.bind=0.0.0.0"
    volumes:
      - ./.data/seaweed-config/security.toml:/etc/seaweedfs/security.toml
    networks:
      - checkpoint

  volume:
    image: checkpointvcs/seaweedfs:local
    build:
      context: ./src/seaweedfs/docker
      dockerfile: Dockerfile.local
    pull_policy: never
    command: 'volume -mserver="master:9333" -ip.bind=0.0.0.0 -port=8080'
    depends_on:
      - master
    volumes:
      - ./.data/seaweed-data:/data
      - ./.data/seaweed-config/security.toml:/etc/seaweedfs/security.toml
    networks:
      - checkpoint

  filer:
    image: checkpointvcs/seaweedfs:local
    build:
      context: ./src/seaweedfs/docker
      dockerfile: Dockerfile.local
    pull_policy: never
    command: 'filer -master="master:9333" -ip.bind=0.0.0.0 -metricsPort=9326'
    tty: true
    stdin_open: true
    depends_on:
      - master
      - volume
    volumes:
      - ./.data/seaweed-config/filer.toml:/etc/seaweedfs/filer.toml
      - ./.data/seaweed-config/security.toml:/etc/seaweedfs/security.toml
    networks:
      - checkpoint

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ./.data/redis:/data
    networks:
      - checkpoint

  redwood:
    build:
      context: ./src/app
      dockerfile: Dockerfile
      target: base
    command: yarn dev:docker
    volumes:
      - ./src/app:/home/node/app
      - node_modules_redwood:/home/node/app/node_modules
      - node_modules_redwood_api:/home/node/app/api/node_modules
    ports:
      - 18911:18911 # debug api port
    depends_on:
      - db
      - supertokens
    environment:
      NODE_CONFIG_DIR: "api/config"
      DATABASE_URL: "postgresql://redwood:redwood@db:5432/redwood"
      TEST_DATABASE_URL: "postgresql://redwood:redwood@db:5432/redwood_test"
      SESSION_SECRET: "TODO_super_secret_session_key_change_me_in_production_please"
      CI: ""
      NODE_ENV: "development"
      REDWOOD_API_HOST: "0.0.0.0"
      SUPERTOKENS_JWKS_URL: "http://localhost:8910/.redwood/functions/auth/jwt/jwks.json"
    networks:
      - checkpoint

  db:
    image: postgres:16-bookworm
    environment:
      POSTGRES_USER: redwood
      POSTGRES_PASSWORD: redwood
      POSTGRES_DB: redwood
    # ports:
    #   - "5432:5432"
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    networks:
      - checkpoint
    healthcheck:
      test: ["CMD-SHELL", "cat /initialised.txt && pg_isready -U redwood"]
      interval: 5s
      timeout: 5s
      retries: 30
    entrypoint: [ "/bin/bash", "-c","
      docker-entrypoint.sh postgres &
      rm -f /initialised.txt || true &&
      until pg_isready -U redwood; do sleep 3; done &&
      psql -U redwood -d postgres -c 'CREATE DATABASE supertokens;' || true &&
      psql -U redwood -d postgres -c \"CREATE USER supertokens WITH PASSWORD 'supertokens';\" || true &&
      psql -U redwood -d postgres -c 'GRANT ALL PRIVILEGES ON DATABASE supertokens TO supertokens;' || true &&
      echo done > /initialised.txt &&
      wait"
    ]

  # After starting with `docker compose -f ./docker-compose.dev.yaml up`,
  # use the console to run commands in the container:
  #
  # ```
  # docker compose -f ./docker-compose.dev.yaml run --rm -it console /bin/bash
  # root@...:/home/node/app# yarn rw prisma migrate dev
  # ```
  console:
    user: root
    build:
      context: ./src/app
      dockerfile: Dockerfile
      target: console
    tmpfs:
      - /tmp
    command: "true"
    environment:
      DATABASE_URL: "postgresql://redwood:redwood@db:5432/redwood"
      TEST_DATABASE_URL: "postgresql://redwood:redwood@db:5432/redwood_test"
    depends_on:
      - db
    networks:
      - checkpoint

  backend:
    build:
      context: ./src/core
      dockerfile: Dockerfile
      target: dev
    command: bun server
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./src/core:/home/bun/app
      - node_modules_backend:/home/bun/app/node_modules
    networks:
      - checkpoint
    environment:
      LD_LIBRARY_PATH: "/home/bun/app/libraries/linux"

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://redwood:redwood@db:5432/supertokens"
      LOG_LEVEL: WARN
    networks:
      - checkpoint
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  node_modules_redwood:
  node_modules_redwood_api:
  node_modules_backend:

networks:
  checkpoint:
