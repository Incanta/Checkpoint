// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id       String @id @default(cuid())
  name     String
  username String @unique
  email    String

  checkpointAdmin Boolean @default(false)

  orgs              OrgUser[]
  specificRepoRoles RepoRole[]
  fileLocks         FileLock[]
  changeLists       ChangeList[]
}

enum RepoAccess {
  NONE
  READ
  WRITE
  ADMIN
}

enum OrgRole {
  MEMBER
  BILLING
  ADMIN
}

model Org {
  id        String    @id @default(cuid())
  deletedAt DateTime?
  deletedBy String?

  name String @unique

  defaultRepoAccess     RepoAccess @default(WRITE)
  defaultCanCreateRepos Boolean    @default(true)

  users OrgUser[]
  repos Repo[]
}

model OrgUser {
  id             String  @id @default(cuid())
  role           OrgRole @default(MEMBER)
  canCreateRepos Boolean @default(true)

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([orgId, userId])
}

model Repo {
  id        String    @id @default(cuid())
  deletedAt DateTime?
  deletedBy String?

  name String

  public Boolean @default(false)

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  additionalRoles RepoRole[]

  files       File[]
  changelists ChangeList[]
  branches    Branch[]     @relation("RepoBranch")

  @@unique([orgId, name])
}

model RepoRole {
  id String @id @default(cuid())

  access RepoAccess

  repo   Repo   @relation(fields: [repoId], references: [id])
  repoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([repoId, userId])
}

model Branch {
  id String @id @default(cuid())

  repo   Repo   @relation("RepoBranch", fields: [repoId], references: [id])
  repoId String

  name       String
  headNumber Int

  isDefault Boolean @default(false)

  @@unique([repoId, name])
}

model ChangeList {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  number  Int
  message String

  repo   Repo   @relation(fields: [repoId], references: [id])
  repoId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  parent       ChangeList?  @relation("ChangeListToParent", fields: [repoId, parentNumber], references: [repoId, number])
  children     ChangeList[] @relation("ChangeListToParent")
  parentNumber Int?

  fileChanges FileChange[]

  @@unique([repoId, number])
}

enum FileChangeType {
  ADD
  DELETE
  MODIFY
}

model FileChange {
  id String @id @default(cuid())

  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  changeList       ChangeList @relation(fields: [repoId, changeListNumber], references: [repoId, number])
  repoId           String
  changeListNumber Int

  type    FileChangeType
  oldPath String?
}

model File {
  id String @id @default(cuid())

  path String

  repo   Repo   @relation(fields: [repoId], references: [id])
  repoId String

  changes FileChange[]
  locks   FileLock[]
}

model FileLock {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  unlockedAt DateTime?

  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
