// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id      String @id @default(cuid())
  name    String
  email   String
  auth0Id String @unique

  checkpointAdmin Boolean @default(false)

  orgs              OrgUser[]
  specificRepoRoles RepoRole[]
}

enum RepoAccess {
  NONE
  READ
  WRITE
  ADMIN
}

enum OrgRole {
  MEMBER
  BILLING
  ADMIN
}

model Org {
  id   String @id @default(cuid())
  name String

  defaultRepoAccess     RepoAccess @default(WRITE)
  defaultCanCreateRepos Boolean    @default(true)

  users OrgUser[]
  repos Repo[]
}

model OrgUser {
  id             String  @id @default(cuid())
  role           OrgRole @default(MEMBER)
  canCreateRepos Boolean @default(true)

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Repo {
  id   String @id @default(cuid())
  name String

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  additionalRoles RepoRole[]
}

model RepoRole {
  id String @id @default(cuid())

  access RepoAccess

  repo   Repo   @relation(fields: [repoId], references: [id])
  repoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
